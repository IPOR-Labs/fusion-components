---
description:
globs:
alwaysApply: false
---

### Decision report: Drop Tailwind, adopt CSS Modules

- **Design scope and guarantees**
  - **Tailwind removal**: Remove all Tailwind usage (deps, `@tailwindcss/vite`, `@import "tailwindcss"`, `@apply`, utilities).
  - **Visual parity**: Minor differences acceptable.

- **Tokens, theming, global CSS**
  - **Keep variables**: Retain `src/index.css` CSS variables and dark mode via root `.dark`.
  - **Reset**: Use modern-normalize.
  - **Tailwind-specific directives**: Replace Tailwind-only constructs (`@theme`, `@custom-variant`, `@apply`) with plain CSS.

- **Component API and variants**
  - **Public API**: Keep as-is, including `className` passthrough and variant prop names/values.
  - **Libraries**: Keep `class-variance-authority` for compatibility.

- **CSS Modules structure and naming**
  - **Colocation**: One module per component, colocated.
  - **Filenames**: Kebab-case, e.g., `component-name.module.css`.
  - **Class names (internal)**: Flexible; default to `.root`, `.header`, `.content`, `.footer`, `.icon`, with variants like `.variantDefault`, `.variantDestructive`, `.sizeSm`, `.sizeLg`.

- **Responsive and container queries**
  - **Breakpoints**: Use Tailwind defaults (sm 640, md 768, lg 1024, xl 1280, 2xl 1536).
  - **Behavior**: Keep existing responsive behavior where utilities implied it; drop container-query-specific behavior as non-critical.

- **Animations**
  - **Inlining**: Inline only animations actually used; names may change.

- **Migration approach**
  - **Incremental order**: 
    1) `src/components/ui` 
    2) `src/components/*` 
    3) `src/fusion/deposit/*` 
    4) `src/fusion/withdraw/*`
  - **Keep Tailwind until done**: Remove Tailwind deps/plugin/imports only after the above are migrated.
  - **Exclude**: Do not touch `/examples/*`.

- **External integration and styling**
  - **Shadow DOM**: All styling is internal; CSS loads into widget shadow root.
  - **No globals**: No global utility classes will remain; everything uses CSS Modules.

- **Tooling and future components**
  - **`components.json`**: Keep with a clear comment that Tailwind is not used anymore.
  - **Rules doc**: Add `/.cursor/rules/shadcn-css-modules.mdc` with manual conversion guidance (high-level rules, not step-by-step automation).
  - **Keep it minimal**: No extra style tooling beyond current setup.

- **Testing and verification**
  - **QA**: Manual QA only; keep existing `data-slot` attributes.
  - **No CI gate**: No checks blocking Tailwind reintroduction.

- **Additional implementation preferences**
  - **Units**: Convert spacing/sizing from utility semantics to rem-based values (note: `px-6` means horizontal padding; convert to the rem equivalent).
  - **Focus-visible/rings**: Approximate Tailwind ring with outline/box-shadow using existing tokens; preserve visible focus cue.
  - **Hashing**: Default Vite CSS Modules hashing is acceptable.
  - **Assumptions**: Current build injects CSS (including CSS Modules and normalize) into the Shadow DOM.

### Crucial aspects and considerations

- **Compatibility vs. purity**: Keeping `cva` preserves call sites and variant ergonomics. It’s harmless and maintains compatibility.
- **Token-first styling**: By retaining your CSS variables, component CSS stays stable and themable. This eases future refactors and reduces churn across components.
- **Maintainable variants**: Map `cva` variants to CSS Module class maps for readability and low runtime cost; avoid long utility strings.
- **Reset in Shadow DOM**: Ensure modern-normalize is included inside the shadow root so host page styles don’t leak.
- **Container-query tradeoff**: Dropping container-variant behaviors (e.g., from `CardHeader`) simplifies CSS; ensure layout still reads well at breakpoints.
- **Animation scope**: Only inline keyframes you actually use to avoid dead CSS; validate timing/functions match expectations.
- **Removal sequencing**: Removing `@tailwindcss/vite`, `tailwindcss`, and `tw-animate-css` must be the last step to avoid breaking intermediate builds; `src/index.css` needs Tailwind directives replaced before removal.
- **Developer UX**: Colocated `.module.css` files improve clarity, diffs, and onboarding, even in Shadow DOM. CSS Modules give deterministic scope and reduce accidental cross-component coupling.

### Benefits for your Shadow DOM-scoped app

- **Component-level isolation and clarity**: Styles live with components, and hashing prevents accidental collisions, even if Shadow DOM already isolates from the host.
- **Refactor-safety and smaller blast radius**: Changing one component’s styles won’t affect others; dead CSS is easier to spot and remove.
- **Token-driven consistency**: With your existing CSS variables, Modules provide a clear, maintainable path for theming and light/dark modes.
- **Simpler tooling**: Eliminating Tailwind plugins and directives reduces build complexity while keeping variant ergonomics via `cva`.

### Implementation plan (incremental, no shims)

#### Phase 0 — Prep
- Add decisions to `/.cursor/rules/shadcn-css-modules.mdc` (manual shadcn conversion guidance).
- Confirm breakpoints: sm 640, md 768, lg 1024, xl 1280, 2xl 1536.
- Keep Tailwind active until Phase 5 completes.

#### Phase 1 — Convert `src/components/ui` (small to large)
Recommended order:
1) `label.tsx` 2) `input.tsx` 3) `button.tsx` 4) `progress.tsx` 5) `skeleton.tsx` 6) `tooltip.tsx` 7) `tabs.tsx` 8) `card.tsx` 9) `form.tsx` 10) `alert.tsx`

Per-component checklist:
- Create colocated kebab-case file: `component-name.module.css`.
- Translate Tailwind utilities to CSS using tokens and rem units. Keep responsive behavior via media queries (Tailwind breakpoints). Skip container queries.
- Keep `data-slot` attributes unchanged.
- Keep `cva`. Map `cva` variants to module class names:
  - Base class: `.root`
  - Elements: `.header`, `.content`, `.footer`, `.icon`
  - Variants: `.variantDefault`, `.variantDestructive`, `.variantOutline`, `.sizeSm`, `.sizeDefault`, `.sizeLg`, `.sizeIcon`
- Replace Tailwind ring/focus with outline/box-shadow using your vars (e.g., `--ring`, `--primary`).
- Replace special selectors like `[&_svg]` with normal descendant selectors.
- Inline only animations actually used (replace `tw-animate-css` usage with local `@keyframes`).
- Manual QA: check focus-visible, spacing, typography scale, disabled states, hover/active, dark mode.

#### Phase 2 — Convert `src/components/*`
- Repeat the same per-component checklist.
- Factor out obvious shared patterns only if it’s natural; otherwise keep everything local to each component.

#### Phase 3 — Convert `src/fusion/deposit/*`
- Migrate view components; keep hooks/logic unchanged.
- Ensure formatting remains in view layer only.

#### Phase 4 — Convert `src/fusion/withdraw/*`
- Same as Phase 3.

#### Phase 5 — Global CSS swap (while Tailwind still installed)
- Add modern-normalize dependency and import it into the Shadow DOM entry:
  - Install `modern-normalize` and import it before your tokens.
- Update `src/index.css`:
  - Remove Tailwind-only constructs (`@import "tailwindcss"`, `@apply`, `@theme`, `@custom-variant`).
  - Keep your CSS variables and dark theme block.
  - Replace the old base layer with explicit base rules (box-sizing, border color, body background/text via vars).
- Verify the app still renders correctly with all converted components.

#### Phase 6 — Tailwind removal
- Remove Tailwind and related deps: `tailwindcss`, `@tailwindcss/vite`, `tw-animate-css`.
- Update `vite.config.ts`: remove the Tailwind plugin import and invocation.
- Remove any leftover Tailwind classes/imports (none should remain by this point).
- Keep `class-variance-authority`.

#### Phase 7 — `components.json` and rules
- Keep `components.json` but add a comment that Tailwind is not used and new components must be manually converted to CSS Modules.
- Add `/.cursor/rules/shadcn-css-modules.mdc` with high-level guidance:
  - Convert utilities to tokens + rem in `.module.css`.
  - Keep `cva`.
  - Map variant/state selectors to module classes.
  - Preserve `data-slot`.
  - Prefer media queries (Tailwind breakpoints), no container queries.
  - Inline only used animations.
  - No global utility classes.
  - Use filenames like `component-name.module.css`.

#### Acceptance criteria
- All files under `src/components/ui`, `src/components/*`, `src/fusion/deposit/*`, `src/fusion/withdraw/*` use CSS Modules; no Tailwind utilities remain.
- `src/index.css` contains tokens/dark theme and base rules; no Tailwind directives.
- Tailwind and related plugins removed from `package.json` and `vite.config.ts`.
- Variants still controlled by `cva`; `className` passthrough intact.
- Animations exist only where used; names may differ.
- Responsive behavior preserved via the specified breakpoints.
- `/examples/*` untouched.
- Manual QA passes for focus, dark mode, spacing/typography, hover/disabled/active states.
