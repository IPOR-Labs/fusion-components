---
description:
globs:
alwaysApply: false
---

## Consolidated spec for Fusion Deposit/Withdraw Widget

### Goal

- Open-source GitHub repo that clients clone and build to get one JS + one CSS for an embeddable widget. No npm module.

### Scope of the spec

- What's in the scope:
  - Embedding strategy: How the widget is included on a host page and initialized.
  - Host–widget communication: Config shape, runtime updates, and lifecycle controls.
  - Wallet connection UX: States and CTAs for connect/switch network, and read-only behavior.
  - Widget API: Global initializer, controller methods, and error handling.
  - Demo usage: Location, purpose, and how to run a basic manual E2E demo.
- This spec DOES NOT cover:
  - Business logic: Any IPOR Fusion smart contract details or ERC-4626 specifics.
  - Usage stories: Flows and behaviors for making deposits or withdrawals.

### Embed model and public API

- Global: `window.FusionWidget.init(container, config): Controller`
  - `container`: `HTMLElement | string` (selector must resolve; element must exist)
  - `config`:
    - `walletClient?: WalletClient | null` (from `viem`)
    - `connect?: () => Promise<void>`
    - `onError?: (err: unknown) => void`
- `Controller`:
  - `update({ walletClient?, connect?, onError? })`
  - `destroy()`
- Single active instance; calling `init()` again destroys the current instance and creates a new one.

### Build-time configuration (hardcoded)

- Location: `src/widget.config.ts` exports constants.
- Fixed in the bundle: `chainId`, `plasmaVaultAddress`, supported chains, RPC transports, ABIs.
- No runtime `chainId` or address.

### Runtime wallet integration

- Host injects `WalletClient` via `controller.update({ walletClient })`.
- Connect CTA calls `config.connect()`; CTA shows pending state; connect is considered done only once host calls `update({ walletClient })`.
- Wrong network: CTA shows “Switch to CHAIN_NAME”; widget attempts `wallet_switchEthereumChain`, then `wallet_addEthereumChain` if needed (using embedded `viem/chains`). On failure: show inline error and call `onError(err)`.

### UI/UX scope

- Unified Deposit/Withdraw widget using tabs; default tab: Deposit.
- Single primary CTA:
  - “Deposit” or “Withdraw” when ready.
  - “Connect wallet” if no wallet.
  - “Switch to CHAIN_NAME” if wallet is on the wrong chain.
- Read-only: show balances/state via public RPC when no wallet; wallet used only for address-aware reads and signing.

### Styling and isolation

- Shadow DOM, mode `open`.
- Full isolation; no theming from host.
- Avoid inline styles; use one external CSS file.
- JS auto-loads hashed CSS by injecting a `<link>` into the Shadow Root; resolve URL relative to the current script via `document.currentScript`.

### Bundling and outputs

- Fully bundle all dependencies (include `react`, `react-dom`, `wagmi`, `viem`); exclude RainbowKit entirely.
- Output filenames with content hashes (e.g., `fusion-widget.[hash].js`, `fusion-widget.[hash].css`).
- Node 22; `pnpm`; Vite build.

### Providers and data layer

- Internal `WagmiProvider` configured at build-time for reads/reactive state.
- Injected `WalletClient` used for writes/signing.
- RPC fallback/robustness relies on `wagmi` behavior.

### Error policy

- `onError(err)` called for user-impacting failures (tx/sign errors, network switch failures); internal recoverable retries are not reported.
- Inline UI errors shown when appropriate.

### Demo page (manual E2E testing)

- Location: `examples/rainbowkit/` (vite project).
- Each demo under `./examples/**` is a standalone app (separate `package.json`) used only for manual testing. Run its own scripts (`pnpm dev`, `pnpm build`, etc.) inside the demo folder.
- Demo-only wallet integration: use `wagmi` + RainbowKit in the demo page (not bundled into the widget).
- Referencing hashed files: manually copied and referenced in `index.html`.
- Local serving: use vite.
- Showcases:
  - Connect/disconnect via demo UI; pending state.
  - Simulate wallet changes with `controller.update({ walletClient })`.
  - Re-init flow (Destroy, Init again).
  - Display last error from `onError`.
  - Option to connect to the wrong network to see “Switch to CHAIN_NAME”.
- README: include an embed snippet and “Run demo locally” instructions.

### Security and privacy

- No telemetry or PII handling.
- Shadow DOM isolation; no `innerHTML` usage; no inline styles; minimal DOM surface.
- CSP considerations: CSS is external `<link>` within Shadow Root, not inline.

### Out of scope (for now)

- No multiple concurrent instances (re-init replaces the current instance).
- No versioning strategy required now.
- No event API (beyond `onError`).
- No tests or demo site required initially.
- No i18n now.

### Licensing

- MIT license in the repo.

### Assumptions/notes

- CSS auto-load path uses `document.currentScript` (assumes script tag inclusion, not ESM import).
- Re-init replaces the current instance and reattaches into the same or a new container as requested by the host.
